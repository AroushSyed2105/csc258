.data
map: .space 16384  # Allocate space for 45 rows * 38 columns * 4 bytes per word (since each word is 4 bytes) = 6840bytes
DISPLAY_ADDR:   .word 0x10008000  # Memory-mapped address for the display
KEYBOARD_ADDR:  .word 0xffff0000  # Memory-mapped address for the keyboard

x1_pos: .word 30        # Stores the x-coordinate of side 1 of pill  
y1_pos: .word 12        # Stores the y-coordinate of side 1 of pill
x2_pos: .word 32        # Stores the x-coordinate of side 2 of pill  
y2_pos: .word 12        # Stores the y-coordinate of side 2 of pill
orientation: .word 0    # Stores the orientation of the pill 
# x_pos and y_pos ARE STARTING POSITIONS FOR OUR PIXEL
prev_x1_pos: .word 30  # Previous x-coordinate
prev_y1_pos: .word 12  # Previous y-coordinate
prev_x2_pos: .word 32  
prev_y2_pos: .word 12  
# colors
col1: .word 0xff0000           # designates memory to col1
col2: .word 0x00ff00    # designates memory to col2
SCREEN_WIDTH: .word 64 


.text
.globl main
    
###  ############################################################

main:
    li $t0, 0           # Row counter (starting at 0)
    li $t1, 0           # Column counter (starting at 0)
    li $t2, 64          # Number of rows
    li $t3, 64          # Number of columns 

loop_rows:
    bge $t0, $t2, end_loop  # If row counter >= 20, end loop

    # Calculate base address for the current row
    la $t4, map         # Load base address of array into $t4
    mul $t5, $t0, $t3     # Multiply row index by number of columns
    sll $t5, $t5, 2     # Multiply by 4 to get byte offset (each word is 4 bytes)
    add $t6, $t4, $t5   # Add offset to base address for the current row

    li $t1, 0           # Reset column counter

loop_columns:
    bge $t1, $t3, next_row  # If column counter >= 38, move to the next row

    # Store a value in array[row][col]
    li $t7, 0x0      # Just an example value to store (could be computed)
    sw $t7, 0($t6)        # Store value at the current row, column position

    addi $t6, $t6, 4      # Move to the next column in the current row
    addi $t1, $t1, 1      # Increment column counter
    j loop_columns        # Continue looping through columns

next_row:
    addi $t0, $t0, 1      # Increment row counter
    j loop_rows           # Continue looping through rows

end_loop:

### DRAWING #########################################################


### GAME LOOP #######################################################
game_loop:
j walls     # skip line drawing methods

### WALLS ##########################################################

walls:
    la $t4, map               # Load base address of the map
    li $a0, 0x10008000        # Display memory base address
    li $t7, 0xFFFFFF          # Color (white)

#base
    li $t1, 60                # Y coordinate (row)
    li $t2, 13                # X coordinate (column start)
    li $t6, 38                # Number of pixels to draw (line length)
    jal draw_horizontal       # Call horizontal line drawing function
#left_wall
    # li $t1, 15              # Y coordinate (row start)
    li $t1, 15                # Y coordinate (row start)
    li $t2, 13                # X coordinate (fixed column)
    li $t6, 45                # Number of pixels to draw (line height)
    jal draw_vertical         # Call vertical line drawing function
# right wall
    li $t1, 15                # moving down 5 rows      
    li $t2, 50                # vert line start
    li $t6, 45                # vert line lenght
    jal draw_vertical         # jump to vertical line drawing loop
# top horizontal left
    li $t1, 15                # y   
    li $t2,13                 # x
    li $t6, 13                # line length
    jal draw_horizontal       # jump to horizontal line drawing loop 
# top horizontal right
    li $t1,15                 # y   
    li $t2, 37                # x
    li $t6, 13                # line length
    jal draw_horizontal       # jump to horizontal line drawing loop 
# neck left
    li $t1, 8                 # moving to 5 rows down from top
    li $t2, 26                # vert line start
    li $t6, 8                 # vert line lenght
    jal draw_vertical         # jump to vertical line drawing loop
# neck right
    li $t1, 8                 # moving to 5 rows down from top
    li $t2, 37                # vert line start
    li $t6, 8                 # vert line lenght
    jal draw_vertical         # jump to vertical line drawing loop
# bye bye
    j end_draw                   # Exit after drawing

### FUNCTIONS #########################################################

draw_horizontal:
    # Compute starting address for row t1
    mul $t5, $t1, 64          # Multiply Y coordinate by total width
    add $t5, $t5, $t2         # Add X coordinate (column start)
    sll $t5, $t5, 2           # Multiply by 4 to get byte offset
    add $t5, $t5, $a0         # Add base display address to get actual start position
    li $t4, 0                 # Column counter

loop_columns2:
    bge $t4, $t6, end_hori    # Stop after drawing t6 pixels
    sw $t7, 0($t5)            # Store color at current pixel
    addi $t5, $t5, 4          # Move to next pixel (4 bytes ahead)
    addi $t4, $t4, 1          # Increment column counter
    j loop_columns2           # Continue loop
    
end_hori:
    jr $ra                    # Return to caller

draw_vertical:
    # Compute starting address for row t1, column t2
    mul $t5, $t1, 64          # Multiply Y coordinate by total width (256)
    add $t5, $t5, $t2         # Add X coordinate (column)
    sll $t5, $t5, 2           # Multiply by 4 to get byte offset
    add $t5, $t5, $a0         # Add base display address to get actual start position
    li $t4, 0                 # Row counter

loop_rows2:
    bge $t4, $t6, end_vert    # Stop after drawing t6 pixels
    sw $t7, 0($t5)            # Store color at current pixel
    addi $t5, $t5, 256        # Move to next row (256 * 4 bytes ahead)
    addi $t4, $t4, 1          # Increment row counter
    j loop_rows2              # Continue loop

end_vert:
    jr $ra                    # Return to caller

end_draw:

gameplay:
    lw $t0, KEYBOARD_ADDR  # Load keyboard base address
    lw $t1, 0($t0)         # Read if a key is pressed (1 if pressed, 0 if not)
    beq $t1, $zero, draw_pixel # If no key press we just want t0 redraw screen 

    lw $t2, 4($t0)         # Get ASCII code of key pressed

    # Move pixel based on key press
    beq $t2, 0x77, rotate     # 'w' (0x87 ASCII for w)
    beq $t2, 0x61, move_left  # 'a' (0x61 ASCII for a)
    beq $t2, 0x73, move_down  # 's' (0x73 ASCII for s)
    beq $t2, 0x64, move_right # 'd' (0x64 ASCII for d)
    beq $t2, 0x71, exit_game  # 'q' (0x71 ASCII for q)

draw_pixel:  
    li $t4, 64                   # Load screen width

    # Compute address for first previous pixel
    lw $t3, prev_y1_pos          
    mul $t3, $t3, $t4            # Row offset (y * width)
    lw $t5, prev_x1_pos          
    add $t3, $t3, $t5            # Final pixel index
    sll $t3, $t3, 2              # Convert to byte offset

    # Compute address for second previous pixel
    lw $t8, prev_y2_pos          
    mul $t8, $t8, $t4            
    lw $t9, prev_x2_pos          
    add $t8, $t8, $t9            
    sll $t8, $t8, 2              # Convert to byte offset

    # Erase previous pixel from display
    lw $t6, DISPLAY_ADDR          
    add $t6, $t6, $t3             
    li $t7, 0x00                 # Black pixel to erase old pixel
    sw $t7, 0($t6)
    sw $t7, 4($t6)
    sw $t7, 256($t6)
    sw $t7, 260($t6)

    # Erase from map
    la $t6, map                  
    add $t6, $t6, $t3             
    sw $t7, 0($t6)
    sw $t7, 4($t6)
    sw $t7, 256($t6)
    sw $t7, 260($t6)

    # Erase second previous pixel from display
    lw $t6, DISPLAY_ADDR          
    add $t6, $t6, $t8             
    sw $t7, 0($t6) 
    sw $t7, 4($t6)
    sw $t7, 256($t6)
    sw $t7, 260($t6)

    # Erase from map
    la $t6, map                  
    add $t6, $t6, $t8             
    sw $t7, 0($t6)
    sw $t7, 4($t6)
    sw $t7, 256($t6)
    sw $t7, 260($t6)

    # Update previous coordinates
    lw $t3, x1_pos          # load curr x pos into $t3
    sw $t3, prev_x1_pos     # store as the prev x pos
    lw $t4, y1_pos          # load curr y pos into $t4
    sw $t4, prev_y1_pos     # store as the prev y pos
    lw $t9, x2_pos          # repeat for pixel 2
    sw $t9, prev_x2_pos 
    lw $t8, y2_pos  
    sw $t8, prev_y2_pos
    lw $t1, col1            # load color 1 into $t1
    lw $t2, col2            # load color 2 into $t2

    ###### Draw new pixel ######
    
    # Compute address for new pixel

    lw $t5, SCREEN_WIDTH

    #x1 and y1
    mul $t4, $t4, $t5            
    add $t4, $t4, $t3
    sll $t4, $t4, 2              

    # x2 and y2
    mul $t8, $t8, $t5            
    add $t8, $t8, $t9
    sll $t8, $t8, 2              

    # Draw pixel in display
    lw $t6, DISPLAY_ADDR         
    add $t6, $t6, $t4  # updating prev_y1_pos
    sw $t1, 0($t6) 
    sw $t1, 4($t6)
    sw $t1, 256($t6)
    sw $t1, 260($t6)               

    lw $t6, DISPLAY_ADDR  # Load display base address
    add $t6, $t6, $t8     # Final memory address for new pixel
    sw $t2, 0($t6)       # Draw new position
    sw $t2, 4($t6)
    sw $t2, 256($t6)
    sw $t2, 260($t6)


    # Write 1 to map
    la $a1, map                  
    add $a1, $a1, $t4             
    sw $t1, 0($a1) 
               

    # Write 2 to map
    la $a1, map                  
    add $a1, $a1, $t9             
    sw $t2, 0($a1)
   

    li $v0, 10
    syscall
    j game_loop

 # Movement logic
move_down:
    lw $t0, x1_pos
    lw $t1, y1_pos
    li $t2, 64 

    lw $t3, y1_pos
    addi $t3, $t3, 2    # Increase y1 by 2 (move down)
    lw $t5, y2_pos
    addi $t5, $t5, 2    # Increase y2 by 2 (move down)
    j update_y

    
update_y:
    sw $t3, y1_pos      # Store updated y position
    sw $t5, y2_pos      # Store updated y position
    j game_loop         # Go back to game loop


move_left:
    lw $t8, x1_pos
    subi $t8, $t8, 2   # Decrease x by 2 (move left)
    lw $t9, x2_pos
    subi $t9, $t9, 2   # Decrease x by 2 (move left)
    bgez $t8, update_x # Ensure x does not go negative
    li $t8, 0          # If negative, reset to 0
    li $t9, 0

update_x:
    sw $t8, x1_pos      # Store updated x position
    sw $t9, x2_pos      # Store updated x position
    j game_loop

move_right:
    lw $t8, x1_pos
    addi $t8, $t8, 2   # Increase x1 by 2 (move right)
    lw $t9, x2_pos
    addi $t9, $t9, 2   # Increase x2 by 2 (move right)
    li $t4, 60         # Max width (64 - 4)
    ble $t8, $t4, update_x  # Ensure x does not exceed bounds
    li $t8, 60         # If exceeded, set to max
    li $t9, 62
    j game_loop

rotate:
    # check current orientation
    # move to next orientation
    # - 0: 1 2      next: 1
    #
    # - 1: 1        next: 2
    #      2
    # - 2:          next: 3
    #      2 1
    # - 3:   2      next: 0
    #        1
    lw $t3, orientation 
    beq $t3, 0, S0
    beq $t3, 1, S1
    beq $t3, 2, S2
    beq $t3, 3, S3
    S0:
    # x2 -= 2
    lw $t8, x2_pos
    sw $t8, prev_x2_pos
    addi $t8, $t8, -2 
    sw $t8, x2_pos
    # y2 += 2
    lw $t8, y2_pos
    sw $t8, prev_y2_pos
    addi $t8, $t8, 2 
    sw $t8, y2_pos
    # load orientation=1
    addi $t3, $t3, 1
    sw $t3, orientation
    j game_loop
    
    S1:
    # x1 += 2
    lw $t8, x1_pos
    sw $t8, prev_x1_pos
    addi $t8, $t8, 2 
    sw $t8, x1_pos
    # y1 += 2
    lw $t8, y1_pos
    sw $t8, prev_y1_pos
    addi $t8, $t8, 2 
    sw $t8, y1_pos
    # load orientation=2
    addi $t3, $t3, 1
    sw $t3, orientation
    j game_loop
    S2:
    # x2 += 2
    lw $t8, x2_pos
    sw $t8, prev_x2_pos
    addi $t8, $t8, 2 
    sw $t8, x2_pos
    # y2 -= 2
    lw $t8, y2_pos
    sw $t8, prev_y2_pos
    addi $t8, $t8, -2 
    sw $t8, y2_pos
    # load orientation=3
    addi $t3, $t3, 1
    sw $t3, orientation
    j game_loop
    S3:
    # x1 -= 2
    lw $t8, x1_pos
    sw $t8, prev_x1_pos
    addi $t8, $t8, -2 
    sw $t8, x1_pos
    # y1 -= 2
    lw $t8, y1_pos
    sw $t8, prev_y1_pos
    addi $t8, $t8, -2 
    sw $t8, y1_pos
    # load orientation=0
    sw $zero, orientation
    
    j game_loop
    
exit_game:
    li $v0, 10  # Exit syscall (MIPS system call for exit)
    syscall
















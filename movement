.data
# Bitmap Display Base Address
DISPLAY_ADDR:   .word 0x10008000  # Memory-mapped address for the display
KEYBOARD_ADDR:  .word 0xffff0000  # Memory-mapped address for the keyboard

# Initial pixel position (X=32, Y=32) (center of 64x64 screen)

# .word used for allocating and initalizing variable
# okay full honesty when i was first starting this yestersay i saw this crappy video
# and people used variable for x_pos and y_pos just to make it easier when updating

x_pos: .word 32  # Stores the x-coordinate of the pixel  
y_pos: .word 32  # Stores the y-coordinate of the pixel
# x_pos and y_pos ARE STARTING POSITIONS FOR OUR PIXEL
prev_x_pos: .word 32  # Previous x-coordinate
prev_y_pos: .word 32  # Previous y-coordinate


# Screen Width
SCREEN_WIDTH: .word 64  # Screen width is 64 pixels

.text
main:
    # Setup frame delay (60 FPS)
    li $v0, 32         # System call for sleep
    # li $a0, 16666      saw this online im not sure if its needed when settig upo FPS

game_loop:
    # Poll for key press
    lw $t0, KEYBOARD_ADDR  # Load keyboard base address
    lw $t1, 0($t0)         # Read if a key is pressed (1 if pressed, 0 if not)
    beq $t1, $zero, draw_pixel # If no key press we just want t0 redraw screen 

    lw $t2, 4($t0)         # Get ASCII code of key pressed

    # Move pixel based on key press
    beq $t2, 0x61, move_left  # 'a' (0x61 ASCII for a)
    beq $t2, 0x73, move_down  # 's' (0x73 ASCII for s)
    beq $t2, 0x64, move_right # 'd' (0x64 ASCII for d)
    beq $t2, 0x71, exit_game  # 'q' (0x71 ASCII for q)
    
draw_pixel:
    # sb vs sw
    # We use sb when storing the pixel color 
    # We use sw when storing coordinates

  
    # Clear previous position
    lw $t3, prev_y_pos    # loading prev y-coordinate
    lw $t4, SCREEN_WIDTH  # load screen width ( i have this incase we change display width again)
    mul $t3, $t3, $t4     # calculating row offset (y * width)
    lw $t5, prev_x_pos    # loading in prev x-coordinate
    add $t3, $t3, $t5     # final pixel index

    sll $t3, $t3, 2       #  shift left logically by 2 bits, which is equivalent to multiplying by 4
                          # We do this since pixel memory address are 4 bytes per pixel
                          # sooo the correct memory offset for a pixel needs us to multiplying the pixel index by 4.

    lw $t6, DISPLAY_ADDR  # Load display base address
    add $t6, $t6, $t3     # add the offset to the base address SOOO we get the exact pixel address

    li $t7, 0x00          # black pixel... my prev bs reasoning on clearing board... obv change.. but for now yes
    sw $t7, 0($t6) # storing black      

    # Update previous coordinates
    lw $t3, x_pos # load curr x pos into $t3
    sw $t3, prev_x_pos # store as the prev x pos
    lw $t4, y_pos  # load curr y pos into $t4
    sw $t4, prev_y_pos    # store as the prev y pos

    # Draw new position
    ### okay you are going to see that this section is essentially the same as clear prev postion..
    ### THATS BECAUSE IN MY LOGIC I AM PAINTING A BLACK SQUARE ON THE PREV LOCATION
    #### WHEREAS HERE I AM PAINTING A WHITE SQUARE ON NEW LOCATION
    
    lw $t5, SCREEN_WIDTH
    mul $t4, $t4, $t5 # calculating row offset (y * width)
    add $t4, $t4, $t3     # Final pixel index

    sll $t4, $t4, 2       # shift left logically by 2 bits, which is equivalent to multiplying by 4
                          # We do this since pixel memory address are 4 bytes per pixel
                          # sooo the correct memory offset for a pixel needs us to multiplying the pixel index by 4.

    lw $t6, DISPLAY_ADDR  # Load display base address
    add $t6, $t6, $t4     # Final memory address for new pixel

    li $t7, 0xFFFFFF          # White pixel
    sw $t7, 0($t6)        # Draw new position

    # Sleep (for 60 FPS frame delay)
    syscall
    j game_loop           # Loop back

# Movement logic
move_down:
    lw $t3, y_pos
    addi $t3, $t3, 1   # Increase y by 1 (move down)
    li $t4, 63         
    ble $t3, $t4, update_y  # Ensure y does not exceed bounds
    li $t3, 63         # If exceeded, set to max
    j game_loop

update_y:
    sw $t3, y_pos      # Store updated y position
    j game_loop         # Go back to game loop


move_left:
    lw $t3, x_pos
    subi $t3, $t3, 1   # Decrease x by 1 (move left)
    bgez $t3, update_x # Ensure x does not go negative
    li $t3, 0          # If negative, reset to 0
update_x:
    sw $t3, x_pos      # Store updated x position
    j game_loop

move_right:
    lw $t3, x_pos
    addi $t3, $t3, 1   # Increase x by 1 (move right)
    li $t4, 63         # Max width (64 - 1)
    ble $t3, $t4, update_x  # Ensure x does not exceed bounds
    li $t3, 63         # If exceeded, set to max
    j game_loop

exit_game:
    li $v0, 10  # Exit syscall (MIPS system call for exit)
    syscall
